(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{100:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var o=t(0),r=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),l=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=l(t),b=o,d=m["".concat(p,".").concat(b)]||m[b]||u[b]||i;return t?r.a.createElement(d,c(c({ref:n},s),{},{components:t})):r.a.createElement(d,c({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,p=new Array(i);p[0]=b;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,p[1]=c;for(var s=2;s<i;s++)p[s]=t[s];return r.a.createElement.apply(null,p)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},86:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var o=t(2),r=(t(0),t(100));const i={id:"function-component.md",title:"Function component",sidebar_label:"Function component",slug:"/function-component"},p={unversionedId:"function-component.md",id:"function-component.md",isDocsHomePage:!1,title:"Function component",description:"Function components is the same as class component but it allow us to create components using functions instead of classes.",source:"@site/docs\\function-component.md",slug:"/function-component",permalink:"/docs/function-component",editUrl:"https://github.com/monster-js/docs-v1/blob/master/docs/function-component.md",version:"current",sidebar_label:"Function component",sidebar:"someSidebar",previous:{title:"Component",permalink:"/docs/component"},next:{title:"Module",permalink:"/docs/module"}},c=[{value:"Logic and template",id:"logic-and-template",children:[]},{value:"Styles",id:"styles",children:[]},{value:"Shadow dom component",id:"shadow-dom-component",children:[]},{value:"Web component slots",id:"web-component-slots",children:[]},{value:"Custom element component",id:"custom-element-component",children:[]},{value:"Component directives",id:"component-directives",children:[]},{value:"Component pipes",id:"component-pipes",children:[]},{value:"Component services",id:"component-services",children:[]}],a={rightToc:c};function s(e){let{components:n,...t}=e;return Object(r.b)("wrapper",Object(o.a)({},a,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Function components is the same as class component but it allow us to create components using functions instead of classes.\nThis type of component can still use all the functionalities of a class component but in different implementation."),Object(r.b)("h2",{id:"logic-and-template"},"Logic and template"),Object(r.b)("p",null,"The same as the class component the logic and template is combined in a single file.\nInstead of using the ",Object(r.b)("inlineCode",{parentName:"p"},"@Component")," decorator, it uses the ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent")," function from the core package to mark the function as a component and set it's selector."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent } from \"@monster-js/core\";\n\nfunction Greeting() {\n    return <h1>Hello World!</h1>\n}\n\nexport default fnComponent('app-greeting', Greeting);\n")),Object(r.b)("p",null,"There are three parameters in ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent"),".\nFirst is the component selector and second is the function component and third is an optional parameter which is a configuration of the component where we can register the services, directives, pipes, and other configurations."),Object(r.b)("h2",{id:"styles"},"Styles"),Object(r.b)("p",null,"The same as class component, styles is imported directly to the ",Object(r.b)("inlineCode",{parentName:"p"},".component.tsx")," file."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import './greeting.styles.scss';\nimport { fnComponent } from \"@monster-js/core\";\n\nfunction Greeting() {\n    return <h1>Hello World!</h1>\n}\n\nexport default fnComponent('app-greeting', Greeting);\n")),Object(r.b)("h2",{id:"shadow-dom-component"},"Shadow dom component"),Object(r.b)("p",null,"To use shadow dom in our function component, we just need to pass ",Object(r.b)("inlineCode",{parentName:"p"},"shadowMode")," property to the third parameter of the ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent")," function.\nThe possible values of ",Object(r.b)("inlineCode",{parentName:"p"},"shadowMode")," are ",Object(r.b)("inlineCode",{parentName:"p"},"open")," and ",Object(r.b)("inlineCode",{parentName:"p"},"closed"),"."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent } from \"@monster-js/core\";\n\nfunction Greeting() {\n    return <h1>Hello World!</h1>\n}\n\nexport default fnComponent('app-greeting', Greeting, {\n    shadowMode: 'closed'\n});\n")),Object(r.b)("h2",{id:"web-component-slots"},"Web component slots"),Object(r.b)("p",null,"Web component slots in function component has the same implementation with the ",Object(r.b)("a",{parentName:"p",href:"./component#shadow-dom-component"},"class component"),"."),Object(r.b)("h2",{id:"custom-element-component"},"Custom element component"),Object(r.b)("p",null,"To create a custom element in function component, we can pass the ",Object(r.b)("inlineCode",{parentName:"p"},"customElement")," property in the ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent")," config.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"customElement")," property is an object with two required properties, the ",Object(r.b)("inlineCode",{parentName:"p"},"superClass")," which is the custom element constructor and ",Object(r.b)("inlineCode",{parentName:"p"},"extends")," which is the type of element it will extend."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent } from \"@monster-js/core\";\n\nfunction CustomButton() {\n    return <span>Click Me</span>\n}\n\nexport default fnComponent('app-custom-button', CustomButton, {\n    customElement: {\n        superClass: HTMLButtonElement,\n        extends: 'button'\n    }\n});\n")),Object(r.b)("p",null,"Now we can attach this component to the parent component ",Object(r.b)("inlineCode",{parentName:"p"},"<button />")," element."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},'<button is="app-custom-button"></button>\n')),Object(r.b)("h2",{id:"component-directives"},"Component directives"),Object(r.b)("p",null,"To use directives in function component, we need to pass the directives to the third parameter of ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent"),"."),Object(r.b)("p",null,"Please see ",Object(r.b)("a",{parentName:"p",href:"./directives"},"Directives")," for more information about directives."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent } from '@monster-js/core';\nimport { HighlightDirective } from './highlight.directive';\n\nfunction Greeting() {\n    return <h1 highlight:color=\"red\">Hello World!</h1>\n}\n\nexport default fnComponent('app-greeting', Greeting, {\n    directives: [HighlightDirective]\n});\n")),Object(r.b)("h2",{id:"component-pipes"},"Component pipes"),Object(r.b)("p",null,"To use pipes in function component, we need to pass the pipes to the third parameter of ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent"),"."),Object(r.b)("p",null,"Please see ",Object(r.b)("a",{parentName:"p",href:"./pipes"},"Pipes")," for more information about pipes."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent, Pipes } from '@monster-js/core';\nimport { UppercasePipe } from './uppercase.pipe';\n\nfunction Greeting() {\n    const greeting = 'Hello World!';\n    return <h1>{greeting | uppercase}</h1>\n}\nexport default fnComponent('app-greeting', Greeting, {\n    pipes: [UppercasePipe]\n});\n")),Object(r.b)("p",null,"To use the pipe inside the function component's logic we can inject the pipe using ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent"),"."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent, Pipes } from '@monster-js/core';\nimport { UppercasePipe } from './uppercase.pipe';\n\nfunction Greeting({ uppercase }) {\n    const greeting = 'Hello World!';\n\n    const uppercaseText = (text: string) => {\n        return uppercase.transform(text);\n    }\n\n    return <h1>{uppercaseText(greeting)}</h1>\n}\nexport default fnComponent('app-greeting', Greeting, {\n    pipes: [UppercasePipe],\n    inject: {\n        uppercase: UppercasePipe\n    }\n});\n")),Object(r.b)("h2",{id:"component-services"},"Component services"),Object(r.b)("p",null,"To use services inside a function component we need to register the services to the component using ",Object(r.b)("inlineCode",{parentName:"p"},"fnComponent"),".\nAfter we register the service, we can now use it inside the component's logic and view."),Object(r.b)("p",null,"Please see ",Object(r.b)("a",{parentName:"p",href:"./services"},"Services")," for more information about services."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"import { fnComponent, Services } from '@monster-js/core';\nimport { GreetingService } from './greeting.service';\n\nfunction Greeting({ greeting }) {\n    return <h1>{greeting.getMessage()}</h1>\n}\n\nexport default fnComponent('app-greeting', Greeting, {\n    inject: {\n        greeting: GreetingService\n    }\n});\n")))}s.isMDXComponent=!0}}]);