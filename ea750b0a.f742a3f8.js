(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{101:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=o.a.createContext({}),l=function(e){var t=o.a.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return o.a.createElement(a.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,c=e.parentName,a=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,m=u["".concat(c,".").concat(d)]||u[d]||b[d]||p;return r?o.a.createElement(m,s(s({ref:t},a),{},{components:r})):o.a.createElement(m,s({ref:t},a))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,c=new Array(p);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,c[1]=s;for(var a=2;a<p;a++)c[a]=r[a];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},91:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return a})),r.d(t,"default",(function(){return u}));var n=r(2),o=r(6),p=(r(0),r(101)),c=["components"],s={id:"http.md",title:"Http",sidebar_label:"Http",slug:"/http"},i={unversionedId:"http.md",id:"http.md",isDocsHomePage:!1,title:"Http",description:"This package helps MonsterJS applications to communicate with a server using http protocol.",source:"@site/docs\\http.md",slug:"/http",permalink:"/docs/http",editUrl:"https://github.com/monster-js/docs-v1/blob/master/docs/http.md",version:"current",sidebar_label:"Http",sidebar:"someSidebar",previous:{title:"Store",permalink:"/docs/store"},next:{title:"Available pipes",permalink:"/docs/available-pipes"}},a=[{value:"Installation",id:"installation",children:[]},{value:"Http interceptor",id:"http-interceptor",children:[{value:"Set request base url",id:"set-request-base-url",children:[]},{value:"Modify request config",id:"modify-request-config",children:[]},{value:"Set request header",id:"set-request-header",children:[]}]},{value:"Http interceptor module",id:"http-interceptor-module",children:[]},{value:"Http verbs",id:"http-verbs",children:[{value:"Get request",id:"get-request",children:[]},{value:"Post request",id:"post-request",children:[]},{value:"Put request",id:"put-request",children:[]},{value:"Patch request",id:"patch-request",children:[]},{value:"Delete request",id:"delete-request",children:[]}]}],l={rightToc:a};function u(e){var t=e.components,r=Object(o.a)(e,c);return Object(p.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,"This package helps MonsterJS applications to communicate with a server using http protocol.\nThis package is a wrapper of fetch api built for MonsterJS applications."),Object(p.b)("h2",{id:"installation"},"Installation"),Object(p.b)("p",null,"We can install the store to our project using npm or yarn."),Object(p.b)("p",null,"Ex."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-bash"},"npm install @monster-js/http\n")),Object(p.b)("p",null,"or"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @monster-js/http\n")),Object(p.b)("h2",{id:"http-interceptor"},"Http interceptor"),Object(p.b)("p",null,"Http interceptor is a way to intercept and modify the request config of every http request."),Object(p.b)("p",null,"The following code is an example of a working http interceptor codes but without functions yet."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { BaseHttpInterceptor } from '@monster-js/http';\n\n@Service()\nexport class HttpInterceptor extends BaseHttpInterceptor {\n}\n")),Object(p.b)("h3",{id:"set-request-base-url"},"Set request base url"),Object(p.b)("p",null,"Setting a base url is helpful for us not to type again the base url of the server each time we make a request in the service.\nIt can also make our code cleaner since we do not need to type long urls on our services."),Object(p.b)("p",null,"Ex."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { BaseHttpInterceptor } from '@monster-js/http';\n\n@Service()\nexport class HttpInterceptor extends BaseHttpInterceptor {\n    override baseUrl = 'http://localhost:4001/api/v1';\n}\n")),Object(p.b)("h3",{id:"modify-request-config"},"Modify request config"),Object(p.b)("p",null,"We can also modify the request config of fetch api before being sent to the server."),Object(p.b)("p",null,"Ex."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { BaseHttpInterceptor } from '@monster-js/http';\n\n@Service()\nexport class HttpInterceptor extends BaseHttpInterceptor {\n    override modifyConfig(config: RequestInit): RequestInit {\n        config.body = {\n            greeting: 'Hello World!'\n        };\n        return config;\n    }\n}\n")),Object(p.b)("h3",{id:"set-request-header"},"Set request header"),Object(p.b)("p",null,"We can use the ",Object(p.b)("inlineCode",{parentName:"p"},"setHeader")," method provided by ",Object(p.b)("inlineCode",{parentName:"p"},"BaseHttpInterceptor")," to set a request header in http interceptor."),Object(p.b)("p",null,"Ex."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { BaseHttpInterceptor } from '@monster-js/http';\n\n@Service()\nexport class HttpInterceptor extends BaseHttpInterceptor {\n    override modifyConfig(config: RequestInit): RequestInit {\n        this.setHeader(config, 'Authorization', `Bearer some-token`);\n        return config;\n    }\n}\n")),Object(p.b)("h2",{id:"http-interceptor-module"},"Http interceptor module"),Object(p.b)("p",null,"After we build the Http interceptor we need to create a module we can import to a module that needs the http interceptor."),Object(p.b)("p",null,"Ex."),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Module, BaseModule } from '@monster-js/module';\nimport { HttpClient } from '@monster-js/http';\nimport { HttpInterceptor } from './http-interceptor.service';\n\n@Module({\n    exports: {\n        services: [\n            HttpInterceptor,\n            { service: HttpClient, config: HttpInterceptor }\n        ]\n    }\n})\nexport class HttpInterceptorModule extends BaseModule {}\n")),Object(p.b)("p",null,"Notice that we exported the ",Object(p.b)("inlineCode",{parentName:"p"},"HttpInterceptor")," and ",Object(p.b)("inlineCode",{parentName:"p"},"HttpClient")," as a service and pass the HttpInterceptor as a config for HttpClient."),Object(p.b)("h2",{id:"http-verbs"},"Http verbs"),Object(p.b)("p",null,"Once ",Object(p.b)("inlineCode",{parentName:"p"},"HttpClient")," is available in our module or component we can now start sending request using the different http verbs or methods.\nHttp supports different http verbs like GET, POST, PUT, PATCH, and DELETE."),Object(p.b)("h3",{id:"get-request"},"Get request"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { HttpClient, ResponseInterface } from '@monster-js/http';\n\ninterface PostInterface {\n    id: number;\n    content: string;\n}\n\n@Service()\nexport class PostService {\n    constructor(private http: HttpClient) {}\n\n    getAll(): Promise<ResponseInterface<PostInterface[]>> {\n        return this.http.get<PostInterface[]>('/get-all');\n    }\n}\n")),Object(p.b)("h3",{id:"post-request"},"Post request"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { HttpClient, ResponseInterface } from '@monster-js/http';\n\ninterface PostInterface {\n    id: number;\n    content: string;\n}\n\n@Service()\nexport class PostService {\n    constructor(private http: HttpClient) {}\n\n    create(post: PostInterface): Promise<ResponseInterface<PostInterface>> {\n        return this.http.post<PostInterface>('/create', post);\n    }\n}\n")),Object(p.b)("h3",{id:"put-request"},"Put request"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { HttpClient, ResponseInterface } from '@monster-js/http';\n\ninterface PostInterface {\n    id: number;\n    content: string;\n}\n\n@Service()\nexport class PostService {\n    constructor(private http: HttpClient) {}\n\n    update(post: PostInterface): Promise<ResponseInterface<PostInterface>> {\n        return this.http.put<PostInterface>('/update/' + post.id, post);\n    }\n}\n")),Object(p.b)("h3",{id:"patch-request"},"Patch request"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { HttpClient, ResponseInterface } from '@monster-js/http';\n\ninterface PostInterface {\n    id: number;\n    content: string;\n}\n\n@Service()\nexport class PostService {\n    constructor(private http: HttpClient) {}\n\n    update(id: number, content: string): Promise<ResponseInterface<PostInterface>> {\n        return this.http.patch<PostInterface>('/update/' + id, { content });\n    }\n}\n")),Object(p.b)("h3",{id:"delete-request"},"Delete request"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-typescript"},"import { Service } from '@monster-js/core';\nimport { HttpClient, ResponseInterface } from '@monster-js/http';\n\n@Service()\nexport class PostService {\n    constructor(private http: HttpClient) {}\n\n    delete(id: number): Promise<ResponseInterface<void>> {\n        return this.http.delete<void>('/delete/' + id);\n    }\n}\n")))}u.isMDXComponent=!0}}]);