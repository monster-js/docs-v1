(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,d=m["".concat(c,".").concat(u)]||m[u]||b[u]||a;return n?o.a.createElement(d,l(l({ref:t},p),{},{components:n})):o.a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var p=2;p<a;p++)c[p]=n[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return m}));var r=n(2),o=n(6),a=(n(0),n(102)),c=["components"],l={id:"component-testing.md",title:"Component testing",sidebar_label:"Component testing",slug:"/component-testing"},i={unversionedId:"component-testing.md",id:"component-testing.md",isDocsHomePage:!1,title:"Component testing",description:"Testing our MonsterJS components can help us check that our components are working properly.",source:"@site/docs\\component-testing.md",slug:"/component-testing",permalink:"/docs/component-testing",editUrl:"https://github.com/monster-js/docs-v1/blob/master/docs/component-testing.md",version:"current",sidebar_label:"Component testing",sidebar:"someSidebar",previous:{title:"Intro to unit testing",permalink:"/docs/testing"},next:{title:"What is MonsterJS CLI",permalink:"/docs/cli-what-is-cli"}},p=[{value:"createTester",id:"createtester",children:[]},{value:"tester.createComponent",id:"testercreatecomponent",children:[]},{value:"parseComponent",id:"parsecomponent",children:[]},{value:"render",id:"render",children:[]},{value:"fireEvent",id:"fireevent",children:[]},{value:"inputText",id:"inputtext",children:[]},{value:"mockInjection",id:"mockinjection",children:[]},{value:"clearInjectionMocks",id:"clearinjectionmocks",children:[]}],s={rightToc:p};function m(e){var t=e.components,n=Object(o.a)(e,c);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Testing our MonsterJS components can help us check that our components are working properly.\nMonsterJS provides a testing tools found in ",Object(a.b)("inlineCode",{parentName:"p"},"@monster-js/tester")," package.\nThese tools can help us validate that all our components are performing as expected."),Object(a.b)("h2",{id:"createtester"},"createTester"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { createTester } from '@monster-js/tester'")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"createTester")," function helps us to create a tester instance based on the provided component."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { createTester } from '@monster-js/tester';\n\nconst tester = createTester(Greeting);\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"createTester")," function has two arguments.\nFirst is the component that we want to create a tester instance and second is an optional argument which is an object that has the following properties."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Property"),Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"components"),Object(a.b)("td",{parentName:"tr",align:null},"Array"),Object(a.b)("td",{parentName:"tr",align:null},"Array of components we want to define.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"externalComponents"),Object(a.b)("td",{parentName:"tr",align:null},"Array"),Object(a.b)("td",{parentName:"tr",align:null},"Array of component selectors which we want our test to treat as external components.")))),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { GreetingChild } from './greeting-child.component';\nimport { createTester } from '@monster-js/tester';\n\nconst tester = createTester(Greeting, {\n    components: [GreetingChild],\n    externalComponents: ['app-external-component']\n});\n")),Object(a.b)("p",null,"Child components that are not needed to be tested can be registered as external component."),Object(a.b)("h2",{id:"testercreatecomponent"},"tester.createComponent"),Object(a.b)("p",null,"After creating a tester instance, we can now call the ",Object(a.b)("inlineCode",{parentName:"p"},"createComponent")," method to build the component and return an object that contains the following properties."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Property"),Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"host"),Object(a.b)("td",{parentName:"tr",align:null},"HTMLElement"),Object(a.b)("td",{parentName:"tr",align:null},"The host element of the component. Can be converted to component using ",Object(a.b)("inlineCode",{parentName:"td"},"parseComponent")," function.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"element"),Object(a.b)("td",{parentName:"tr",align:null},"HTMLElement"),Object(a.b)("td",{parentName:"tr",align:null},"The DOM element version of the component's template.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"component"),Object(a.b)("td",{parentName:"tr",align:null},"Object"),Object(a.b)("td",{parentName:"tr",align:null},"The component instance.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"shadowRoot"),Object(a.b)("td",{parentName:"tr",align:null},"Object"),Object(a.b)("td",{parentName:"tr",align:null},"The shadow root of a shadow dom component.")))),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { createTester } from '@monster-js/tester';\n\nconst tester = createTester(Greeting);\n\nit('should create a component', function() {\n    const { host, element, component, shadowRoot } = tester.createComponent();\n    expect(host).toBeTruthy();\n    expect(element).toBeTruthy();\n    expect(component).toBeTruthy();\n    expect(shadowRoot).toBeTruthy();\n});\n")),Object(a.b)("h2",{id:"parsecomponent"},"parseComponent"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { parseComponent } from '@monster-js/tester'")),Object(a.b)("p",null,"This will convert an element to component and return an object that has the same structure as the one returned by the ",Object(a.b)("inlineCode",{parentName:"p"},"tester.createComponent")," method.\nIf the element is not a component, it will throw an error."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { GreetingChild } from './greeting-child.component';\nimport { createTester, parseComponent } from '@monster-js/tester';\n\nconst tester = createTester(Greeting, {\n    components: [GreetingChild]\n});\n\nit('should have the child component', function() {\n    const greeting = tester.createComponent();\n    const childElement = greeting.element.querySelector('app-greeting-child');\n    const { host, element, component, shadowRoot } = parseComponent(childElement);\n    expect(host).toBeTruthy();\n    expect(element).toBeTruthy();\n    expect(component).toBeTruthy();\n    expect(shadowRoot).toBeTruthy();\n});\n")),Object(a.b)("h2",{id:"render"},"render"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { render } from '@monster-js/tester'")),Object(a.b)("p",null,"This will render the component that is already defined using ",Object(a.b)("inlineCode",{parentName:"p"},"customElement.define")," and return an object that has the same structure as the one returned by the ",Object(a.b)("inlineCode",{parentName:"p"},"tester.createComponent")," method."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { GreetingChild } from './greeting-child.component';\nimport { createTester, render } from '@monster-js/tester';\n\nconst tester = createTester(Greeting, {\n    components: [GreetingChild]\n});\n\nit('should be able to render child component', function() {\n    const { host, element, component, shadowRoot } = render(GreetingChild);\n    expect(host).toBeTruthy();\n    expect(element).toBeTruthy();\n    expect(component).toBeTruthy();\n    expect(shadowRoot).toBeTruthy();\n});\n")),Object(a.b)("h2",{id:"fireevent"},"fireEvent"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { fireEvent } from '@monster-js/tester'")),Object(a.b)("p",null,"This will fire an event of an an element like click, dblclick, input and other events."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { fireEvent, createTester } from '@monster-js/tester';\nimport { Counter } from 'counter.component';\n\nconst tester = createTester(Counter);\n\nit('should increment the counter when button is clicked', function() {\n    const { element } = tester.createComponent();\n    const btn = element.querySelector('button');\n    const span = element.querySelector('.count-holder');\n    fireEvent(btn, 'click')\n    expect(span.textContent).toBe('1');\n});\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"fireEvent")," function has the following arguments."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Parameter"),Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"element"),Object(a.b)("td",{parentName:"tr",align:null},"Element"),Object(a.b)("td",{parentName:"tr",align:null},"That target html element of the event we want to fire.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"eventType"),Object(a.b)("td",{parentName:"tr",align:null},"Element"),Object(a.b)("td",{parentName:"tr",align:null},"That target html element of the event we want to fire.")))),Object(a.b)("h2",{id:"inputtext"},"inputText"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { inputText } from '@monster-js/tester'")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"inputText")," function allows us to emulate a user typing into an input box."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { inputText, createTester } from '@monster-js/tester';\nimport { Counter } from 'counter.component';\n\nconst tester = createTester(Counter);\n\nit('should display the inputted text to text holder', function() {\n    const { element } = tester.createComponent();\n    const input = element.querySelector('input');\n    const span = element.querySelector('.text-holder');\n    inputText(input, 'Hello World');\n    expect(span.textContent).toBe('Hello World');\n});\n")),Object(a.b)("p",null,"If it has only two arguments the function is synchronous and asynchronous if it has a third argument which is the input delay in milliseconds."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { inputText, createTester } from '@monster-js/tester';\nimport { Counter } from 'counter.component';\n\nconst tester = createTester(Counter);\n\nit('should display the inputted text to text holder', async function() {\n    const { element } = tester.createComponent();\n    const input = element.querySelector('input');\n    const span = element.querySelector('.text-holder');\n    await inputText(input, 'Hello World', 100);\n    expect(span.textContent).toBe('Hello World');\n});\n")),Object(a.b)("p",null,"The arguments of ",Object(a.b)("inlineCode",{parentName:"p"},"inputText(element, text, delay)")," are the following."),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Argument"),Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"element"),Object(a.b)("td",{parentName:"tr",align:null},"Element"),Object(a.b)("td",{parentName:"tr",align:null},"The element where the text should be inputted.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"text"),Object(a.b)("td",{parentName:"tr",align:null},"string"),Object(a.b)("td",{parentName:"tr",align:null},"The text that will be inputted in the element.")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"delay"),Object(a.b)("td",{parentName:"tr",align:null},"number"),Object(a.b)("td",{parentName:"tr",align:null},"The delay of the input event for the next character when typing.")))),Object(a.b)("h2",{id:"mockinjection"},"mockInjection"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { mockInjection } from '@monster-js/tester'")),Object(a.b)("p",null,"This function allows us to replace injected classes to anything we want.\nThis will help us handle some logic where some codes are not available for testing."),Object(a.b)("p",null,"A good example for this is a service that has methods that sends requests to a backend server.\nWe don't want our test creating or modifying data into our database.\nSo we use a mock for this scenario."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { GreetingService } from './greeting.service';\nimport { createTester, mockInjection } from '@monster-js/tester';\n\nconst tester = createTester<Greeting>(Greeting);\n\nit('should display message from mock service', function() {\n    mockInjection(Greeting, GreetingService, {\n        getMessage: () => 'Mock Service Message'\n    });\n    const { element } = tester.createComponent();\n    expect(element.textContent).toBe('Mock Service Message');\n});\n")),Object(a.b)("p",null,"In the example above we created a mock service of ",Object(a.b)("inlineCode",{parentName:"p"},"GreetingService")," so that every time we call the method ",Object(a.b)("inlineCode",{parentName:"p"},"getMessage")," of the service we call the ",Object(a.b)("inlineCode",{parentName:"p"},"getMessage")," from the mock object instead.\nThe ",Object(a.b)("inlineCode",{parentName:"p"},"mockInjection")," function will work on any class injected to the component and not just for services."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"mockInjection")," has three arguments.\nFirst is the component, second is the injected class, and third is the mock object."),Object(a.b)("h2",{id:"clearinjectionmocks"},"clearInjectionMocks"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"import { clearInjectionMocks } from '@monster-js/tester'")),Object(a.b)("p",null,"This function allows us to remove all the mock data in our dependency injection container made by ",Object(a.b)("inlineCode",{parentName:"p"},"mockInjection")," function."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Greeting } from './greeting.component';\nimport { clearInjectionMocks } from '@monster-js/tester';\n\nit('should be able to test from original service', function() {\n    clearInjectionMocks(Greeting);\n    ...\n});\n")),Object(a.b)("p",null,"This function has one argument, the component which we want to clear its mock data."))}m.isMDXComponent=!0}}]);