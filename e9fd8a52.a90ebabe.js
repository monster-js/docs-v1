(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{88:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(2),o=t(6),a=(t(0),t(99)),i=["components"],c={id:"event-handling.md",title:"Event handling",sidebar_label:"Event handling",slug:"/event-handling"},l={unversionedId:"event-handling.md",id:"event-handling.md",isDocsHomePage:!1,title:"Event handling",description:"Event handling is a directive lets the component to respond to user action on the UI like button clicks, text inputs, drag elements and other actions.",source:"@site/docs\\event-handling.md",slug:"/event-handling",permalink:"/docs/event-handling",editUrl:"https://github.com/monster-js/docs-v1/blob/master/docs/event-handling.md",version:"current",sidebar_label:"Event handling",sidebar:"someSidebar",previous:{title:"Module",permalink:"/docs/module"},next:{title:"Data binding",permalink:"/docs/data-binding"}},s=[{value:"Syntax",id:"syntax",children:[]},{value:"Method parameters",id:"method-parameters",children:[]},{value:"Event variable",id:"event-variable",children:[]}],p={rightToc:s};function u(e){var n=e.components,t=Object(o.a)(e,i);return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Event handling is a directive lets the component to respond to user action on the UI like button clicks, text inputs, drag elements and other actions.\nIt uses a directive with namespace of ",Object(a.b)("inlineCode",{parentName:"p"},"on")," to bind the component methods to an element as an event listener."),Object(a.b)("h2",{id:"syntax"},"Syntax"),Object(a.b)("p",null,"The syntax of event handling directive is ",Object(a.b)("inlineCode",{parentName:"p"},"on:<event_name>={<component_method>}"),".\nThe component_method must be a function and not a function call expression."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Component } from '@monster-js/core';\n\n@Component('app-greeting')\nexport class Greeting {\n    clickMe() {\n        console.log('Hello World!');\n    }\n\n    render() {\n        return <button on:click={this.clickMe}>Greet</button>\n    }\n}\n")),Object(a.b)("h2",{id:"method-parameters"},"Method parameters"),Object(a.b)("p",null,"Since event handling directive accepts a function as directive value.\nWe need to pass an unnamed function or fat arrow function and return the call expression of the component method in order for us to be able to pass some parameters to it."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Component } from '@monster-js/core';\n\n@Component('app-greeting')\nexport class Greeting {\n    clickMe(name: string) {\n        console.log(`Hello ${name}!`);\n    }\n\n    render() {\n        return <button on:click={() => this.clickMe('Johnny')}>Greet</button>\n    }\n}\n")),Object(a.b)("h2",{id:"event-variable"},"Event variable"),Object(a.b)("p",null,"We can also get the event variable that holds the data of the event."),Object(a.b)("p",null,"Ex."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Component } from '@monster-js/core';\n\n@Component('app-greeting')\nexport class Greeting {\n    clickMe(event) {\n        console.log(event);\n    }\n\n    render() {\n        return <button on:click={(event) => this.clickMe(event)}>Greet</button>\n    }\n}\n")),Object(a.b)("p",null,"or just simply"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Component } from '@monster-js/core';\n\n@Component('app-greeting')\nexport class Greeting {\n    clickMe(event) {\n        console.log(event);\n    }\n\n    render() {\n        return <button on:click={this.clickMe}>Greet</button>\n    }\n}\n")))}u.isMDXComponent=!0},99:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return t?o.a.createElement(m,c(c({ref:n},s),{},{components:t})):o.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);